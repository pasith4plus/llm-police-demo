import streamlit as st
from langchain_core.messages import HumanMessage
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
from langchain_community.llms import HuggingFaceEndpoint
from langchain.llms import OpenAI
from config import *
import os

st.title('üìß Testimony Writer Assistant App')

openai_api_key = st.sidebar.text_input('OpenAI API Key')
huggingface_api_key = st.sidebar.text_input('HuggingFaceHub API Key')
# huggingface_repo_id = st.sidebar.text_input('HuggingFace Repo ID', "mistralai/Mistral-8x7B-Instruct-v0.1")

option = st.selectbox(
    'Which model that you want to test?',
    ('Gemini', 'GPT4'))

st.write('You selected:', option)

def generate_response(input_text):

  # os.environ["GOOGLE_API_KEY"] = GOOGLE_API_KEY
  # os.environ["LINE_CHATBOT_API_KEY"] = LINE_CHATBOT_API_KEY

  # 1. setup prompt
  prompt_1 = ChatPromptTemplate.from_template(
      """
      ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏™‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏®‡∏≤‡∏• ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≤‡∏•‡∏ö‡∏≤‡∏•‡∏î‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á 

      ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ

      ‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤ ‡∏£‡πâ‡∏≠‡∏¢‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≤‡∏•‡∏î‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á  ‡∏Ç‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô  (‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏î‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°)

      **‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á** : (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á)

      **‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á** : (‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á)

      **‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á**: (‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á)

      **‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå**: (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤)

      **‡∏û‡∏¢‡∏≤‡∏ô**: (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏û‡∏ö‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå)

      ‡∏™‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô: {topic}
      """
  )

  # 2. chain invocation
  output_parser = StrOutputParser()
  chain_1 = prompt_1 | llm | output_parser

  reply_message = chain_1.invoke({"topic": input_text})

  st.info(reply_message)

with st.form('my_form'):
  # Call Large Langauge Model (LLM) Function Depending on User
  if option == 'GPT4': 
    llm = OpenAI(model_name="gpt-4", api_key=openai_api_key)
  elif option == 'Gemini': 
    llm = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.7)
    llm_vision = ChatGoogleGenerativeAI(model="gemini-pro-vision")
  # elif option == 'HuggingFace': 
  #   llm = HuggingFaceEndpoint(repo_id=huggingface_repo_id, temperature=0.5, token=huggingface_api_key)

  # prompt
  text = st.text_area('How do you want your testimony to be written?', '‡∏ô‡∏≤‡∏¢ ‡∏Å. ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Ç‡∏ï‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ ‡∏ó‡∏≥‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏´‡∏≤‡∏¢ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° ‡∏û.‡∏®. 2567 ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 15:00 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠ ‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏î‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏°‡∏µ‡∏û‡∏¢‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏≤‡∏á ‡∏Ç. ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏¢ ‡∏Å. ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏¢ ‡∏Å. ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ')
  
  submitted = st.form_submit_button('Submit')

  # Generate Reponse
  ## Gemini
  if option == 'Gemini' and submitted:
    generate_response(text)
  
  ## GPT 4
  if option == 'GPT4' and not openai_api_key.startswith('sk-'):
    st.warning('Please enter your OpenAI API key!', icon='‚ö†')
  if option == 'GPT4' and submitted and openai_api_key.startswith('sk-'):
    generate_response(text)

  # ## HuggingFaceHub
  # if option == 'HuggingFace' and not huggingface_api_key.startswith('hf_'):
  #   st.warning('Please enter your HuggingFaceHub API key!', icon='‚ö†')
  # if option == 'HuggingFace' and submitted and huggingface_api_key.startswith('hf_'):
  #   generate_response(text)